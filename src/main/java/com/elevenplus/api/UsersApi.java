/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.elevenplus.api;

import com.elevenplus.model.Error;
import com.elevenplus.model.User;
import com.elevenplus.model.UsersUserIdRolePutRequest;
import com.elevenplus.model.UsersUserIdStatusPutRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-06-27T14:08:22.962266600+01:00[Europe/London]")
@Validated
@Tag(name = "Admin - User Management", description = "Endpoints for administrators to manage users and roles.")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /users : Get a list of all users (Admin only)
     *
     * @param role Filter users by role. (optional)
     * @param status Filter users by status. (optional)
     * @return List of users. (status code 200)
     *         or Unauthorized. (status code 401)
     *         or Forbidden - User not an Admin. (status code 403)
     */
    @Operation(
        operationId = "usersGet",
        summary = "Get a list of all users (Admin only)",
        tags = { "Admin - User Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of users.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden - User not an Admin.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users",
        produces = { "application/json" }
    )
    default ResponseEntity<List<User>> usersGet(
        @Parameter(name = "role", description = "Filter users by role.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "role", required = false) String role,
        @Parameter(name = "status", description = "Filter users by status.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "status", required = false) String status
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"role\" : \"admin\", \"name\" : \"name\", \"userId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"email\" : \"email\", \"status\" : \"active\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"role\" : \"admin\", \"name\" : \"name\", \"userId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"email\" : \"email\", \"status\" : \"active\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/me : Get current authenticated user&#39;s profile
     *
     * @return User profile retrieved successfully. (status code 200)
     *         or Unauthorized - Missing or invalid token. (status code 401)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "usersMeGet",
        summary = "Get current authenticated user's profile",
        tags = { "Authentication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User profile retrieved successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized - Missing or invalid token.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/me",
        produces = { "application/json" }
    )
    default ResponseEntity<User> usersMeGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"role\" : \"admin\", \"name\" : \"name\", \"userId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"email\" : \"email\", \"status\" : \"active\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /users/{userId} : Remove a user (Admin only)
     *
     * @param userId ID of the user to remove. (required)
     * @return User removed successfully. (status code 204)
     *         or Unauthorized. (status code 401)
     *         or Forbidden - User not an Admin. (status code 403)
     *         or Not Found - User not found. (status code 404)
     */
    @Operation(
        operationId = "usersUserIdDelete",
        summary = "Remove a user (Admin only)",
        tags = { "Admin - User Management" },
        responses = {
            @ApiResponse(responseCode = "204", description = "User removed successfully."),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden - User not an Admin.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found - User not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{userId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> usersUserIdDelete(
        @Parameter(name = "userId", description = "ID of the user to remove.", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /users/{userId}/role : Update a user&#39;s role (Admin only)
     *
     * @param userId ID of the user to update. (required)
     * @param usersUserIdRolePutRequest  (required)
     * @return User role updated successfully. (status code 200)
     *         or Bad request - Invalid role or ID. (status code 400)
     *         or Unauthorized. (status code 401)
     *         or Forbidden - User not an Admin. (status code 403)
     *         or Not Found - User not found. (status code 404)
     */
    @Operation(
        operationId = "usersUserIdRolePut",
        summary = "Update a user's role (Admin only)",
        tags = { "Admin - User Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User role updated successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request - Invalid role or ID.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden - User not an Admin.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found - User not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/{userId}/role",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<User> usersUserIdRolePut(
        @Parameter(name = "userId", description = "ID of the user to update.", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId,
        @Parameter(name = "UsersUserIdRolePutRequest", description = "", required = true) @Valid @RequestBody UsersUserIdRolePutRequest usersUserIdRolePutRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"role\" : \"admin\", \"name\" : \"name\", \"userId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"email\" : \"email\", \"status\" : \"active\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /users/{userId}/status : Block or unblock a user (Admin only)
     *
     * @param userId ID of the user to update. (required)
     * @param usersUserIdStatusPutRequest  (required)
     * @return User status updated successfully. (status code 200)
     *         or Bad request - Invalid status or ID. (status code 400)
     *         or Unauthorized. (status code 401)
     *         or Forbidden - User not an Admin. (status code 403)
     *         or Not Found - User not found. (status code 404)
     */
    @Operation(
        operationId = "usersUserIdStatusPut",
        summary = "Block or unblock a user (Admin only)",
        tags = { "Admin - User Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User status updated successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request - Invalid status or ID.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden - User not an Admin.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found - User not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/{userId}/status",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<User> usersUserIdStatusPut(
        @Parameter(name = "userId", description = "ID of the user to update.", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId,
        @Parameter(name = "UsersUserIdStatusPutRequest", description = "", required = true) @Valid @RequestBody UsersUserIdStatusPutRequest usersUserIdStatusPutRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"role\" : \"admin\", \"name\" : \"name\", \"userId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"email\" : \"email\", \"status\" : \"active\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
