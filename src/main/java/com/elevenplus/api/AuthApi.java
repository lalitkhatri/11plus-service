/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.elevenplus.api;

import com.elevenplus.model.*;
import com.elevenplus.model.Error;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-06-27T14:08:22.962266600+01:00[Europe/London]")
@Validated
@Tag(name = "Authentication", description = "User authentication and registration")
public interface AuthApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /auth/google/login : Initiate Google login
     *
     * @param authGoogleLoginPostRequest  (required)
     * @return Successful login, returns JWT token. (status code 200)
     *         or Unauthorized - Invalid ID token. (status code 401)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "authGoogleLoginPost",
        summary = "Initiate Google login",
        tags = { "Authentication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful login, returns JWT token.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthSuccess.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized - Invalid ID token.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/google/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AuthSuccess> authGoogleLoginPost(
        @Parameter(name = "AuthGoogleLoginPostRequest", description = "", required = true) @Valid @RequestBody AuthGoogleLoginPostRequest authGoogleLoginPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expiresIn\" : 0, \"accessToken\" : \"accessToken\", \"user\" : { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"role\" : \"admin\", \"name\" : \"name\", \"userId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"email\" : \"email\", \"status\" : \"active\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"refreshToken\" : \"refreshToken\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /auth/google/register : Register new user with Google Identity
     *
     * @param authGoogleRegisterPostRequest  (required)
     * @return User registered successfully, returns JWT token. (status code 201)
     *         or Bad request - User already exists or invalid role. (status code 400)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "authGoogleRegisterPost",
        summary = "Register new user with Google Identity",
        tags = { "Authentication" },
        responses = {
            @ApiResponse(responseCode = "201", description = "User registered successfully, returns JWT token.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthSuccess.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request - User already exists or invalid role.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/google/register",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AuthSuccess> authGoogleRegisterPost(
        @Parameter(name = "AuthGoogleRegisterPostRequest", description = "", required = true) @Valid @RequestBody AuthGoogleRegisterPostRequest authGoogleRegisterPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expiresIn\" : 0, \"accessToken\" : \"accessToken\", \"user\" : { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"role\" : \"admin\", \"name\" : \"name\", \"userId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"email\" : \"email\", \"status\" : \"active\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"refreshToken\" : \"refreshToken\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /auth/token/refresh : Refresh access token
     *
     * @param authTokenRefreshPostRequest  (required)
     * @return Token refreshed successfully. (status code 200)
     *         or Unauthorized - Invalid refresh token. (status code 401)
     */
    @Operation(
        operationId = "authTokenRefreshPost",
        summary = "Refresh access token",
        tags = { "Authentication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Token refreshed successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthSuccess.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized - Invalid refresh token.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/token/refresh",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AuthSuccess> authTokenRefreshPost(
        @Parameter(name = "AuthTokenRefreshPostRequest", description = "", required = true) @Valid @RequestBody AuthTokenRefreshPostRequest authTokenRefreshPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expiresIn\" : 0, \"accessToken\" : \"accessToken\", \"user\" : { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"role\" : \"admin\", \"name\" : \"name\", \"userId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"email\" : \"email\", \"status\" : \"active\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"refreshToken\" : \"refreshToken\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
