/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.elevenplus.api;

import com.elevenplus.model.Error;
import com.elevenplus.model.QuestionHistoryItem;
import com.elevenplus.model.StudentProgressSummary;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-06-27T14:08:22.962266600+01:00[Europe/London]")
@Validated
@Tag(name = "Parent - Child Progress", description = "Endpoints for parents to monitor their child's progress.")
public interface ParentApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /parent/children/{childId}/progress : Get progress of a specific child (Parent only)
     *
     * @param childId ID of the child (student) to retrieve progress for. (required)
     * @return Child&#39;s progress summary. (status code 200)
     *         or Unauthorized. (status code 401)
     *         or Forbidden - User not a Parent or not authorized for this child. (status code 403)
     *         or Not Found - Child not found. (status code 404)
     */
    @Operation(
        operationId = "parentChildrenChildIdProgressGet",
        summary = "Get progress of a specific child (Parent only)",
        tags = { "Parent - Child Progress" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Child's progress summary.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StudentProgressSummary.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden - User not a Parent or not authorized for this child.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found - Child not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/parent/children/{childId}/progress",
        produces = { "application/json" }
    )
    default ResponseEntity<StudentProgressSummary> parentChildrenChildIdProgressGet(
        @Parameter(name = "childId", description = "ID of the child (student) to retrieve progress for.", required = true, in = ParameterIn.PATH) @PathVariable("childId") String childId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"incorrectAnswers\" : 1, \"totalQuestionsAttempted\" : 0, \"sectionsCompleted\" : 5, \"averageTimePerQuestion\" : 2.302136, \"correctAnswers\" : 6, \"accuracyPercentage\" : 5.962134 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /parent/children/{childId}/progress/history : Get detailed question history for a child (Parent only)
     *
     * @param childId ID of the child (student) to retrieve history for. (required)
     * @param status Filter by attempt status. (optional)
     * @param sectionId Filter by section ID. (optional)
     * @param categoryId Filter by category ID. (optional)
     * @param difficulty Filter by difficulty level. (optional)
     * @return List of question attempts or unattempted questions for the child. (status code 200)
     *         or Unauthorized. (status code 401)
     *         or Forbidden - User not a Parent or not authorized for this child. (status code 403)
     *         or Not Found - Child not found. (status code 404)
     */
    @Operation(
        operationId = "parentChildrenChildIdProgressHistoryGet",
        summary = "Get detailed question history for a child (Parent only)",
        tags = { "Parent - Child Progress" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of question attempts or unattempted questions for the child.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = QuestionHistoryItem.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden - User not a Parent or not authorized for this child.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found - Child not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/parent/children/{childId}/progress/history",
        produces = { "application/json" }
    )
    default ResponseEntity<List<QuestionHistoryItem>> parentChildrenChildIdProgressHistoryGet(
        @Parameter(name = "childId", description = "ID of the child (student) to retrieve history for.", required = true, in = ParameterIn.PATH) @PathVariable("childId") String childId,
        @Parameter(name = "status", description = "Filter by attempt status.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "status", required = false) String status,
        @Parameter(name = "sectionId", description = "Filter by section ID.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sectionId", required = false) String sectionId,
        @Parameter(name = "categoryId", description = "Filter by category ID.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "categoryId", required = false) String categoryId,
        @Parameter(name = "difficulty", description = "Filter by difficulty level.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "difficulty", required = false) String difficulty
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"selectedAnswerId\" : \"selectedAnswerId\", \"questionId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"explanation\" : \"explanation\", \"questionText\" : \"questionText\", \"status\" : \"Wrong\", \"attemptedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"isCorrect\" : true, \"tags\" : { \"difficulty\" : \"Easy\", \"section\" : \"section\", \"category\" : \"category\" } }, { \"selectedAnswerId\" : \"selectedAnswerId\", \"questionId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"explanation\" : \"explanation\", \"questionText\" : \"questionText\", \"status\" : \"Wrong\", \"attemptedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"isCorrect\" : true, \"tags\" : { \"difficulty\" : \"Easy\", \"section\" : \"section\", \"category\" : \"category\" } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
