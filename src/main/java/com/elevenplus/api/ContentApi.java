/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.elevenplus.api;

import com.elevenplus.model.*;
import com.elevenplus.model.Error;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-06-27T14:08:22.962266600+01:00[Europe/London]")
@Validated
@Tag(name = "Admin - Content Management", description = "Endpoints for administrators to manage sections, categories, and questions.")
public interface ContentApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PUT /content/categories/{categoryId} : Update an existing content category (Admin only)
     *
     * @param categoryId ID of the category to update. (required)
     * @param contentCategoriesCategoryIdPutRequest  (required)
     * @return Category updated successfully. (status code 200)
     *         or Bad request - Missing name or invalid ID. (status code 400)
     *         or Unauthorized. (status code 401)
     *         or Forbidden - User not an Admin. (status code 403)
     *         or Not Found - Category not found. (status code 404)
     */
    @Operation(
        operationId = "contentCategoriesCategoryIdPut",
        summary = "Update an existing content category (Admin only)",
        tags = { "Admin - Content Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Category updated successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentCategory.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request - Missing name or invalid ID.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden - User not an Admin.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found - Category not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/content/categories/{categoryId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ContentCategory> contentCategoriesCategoryIdPut(
        @Parameter(name = "categoryId", description = "ID of the category to update.", required = true, in = ParameterIn.PATH) @PathVariable("categoryId") String categoryId,
        @Parameter(name = "ContentCategoriesCategoryIdPutRequest", description = "", required = true) @Valid @RequestBody ContentCategoriesCategoryIdPutRequest contentCategoriesCategoryIdPutRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"sectionId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"categoryId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /content/sections : Get all content sections
     *
     * @return List of content sections. (status code 200)
     *         or Unauthorized. (status code 401)
     */
    @Operation(
        operationId = "contentSectionsGet",
        summary = "Get all content sections",
        tags = { "Admin - Content Management", "Student - Content Access" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of content sections.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ContentSection.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/content/sections",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ContentSection>> contentSectionsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"name\", \"sectionId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"name\" : \"name\", \"sectionId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /content/sections : Add a new content section (Admin only)
     *
     * @param contentSectionsPostRequest  (required)
     * @return Section created successfully. (status code 201)
     *         or Bad request - Missing name or duplicate. (status code 400)
     *         or Unauthorized. (status code 401)
     *         or Forbidden - User not an Admin. (status code 403)
     */
    @Operation(
        operationId = "contentSectionsPost",
        summary = "Add a new content section (Admin only)",
        tags = { "Admin - Content Management" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Section created successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentSection.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request - Missing name or duplicate.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden - User not an Admin.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/content/sections",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ContentSection> contentSectionsPost(
        @Parameter(name = "ContentSectionsPostRequest", description = "", required = true) @Valid @RequestBody ContentSectionsPostRequest contentSectionsPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"sectionId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /content/sections/{sectionId}/categories : Get categories within a specific section
     *
     * @param sectionId ID of the section. (required)
     * @return List of categories within the section. (status code 200)
     *         or Unauthorized. (status code 401)
     *         or Not Found - Section not found. (status code 404)
     */
    @Operation(
        operationId = "contentSectionsSectionIdCategoriesGet",
        summary = "Get categories within a specific section",
        tags = { "Admin - Content Management", "Student - Content Access" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of categories within the section.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ContentCategory.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found - Section not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/content/sections/{sectionId}/categories",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ContentCategory>> contentSectionsSectionIdCategoriesGet(
        @Parameter(name = "sectionId", description = "ID of the section.", required = true, in = ParameterIn.PATH) @PathVariable("sectionId") String sectionId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"name\", \"sectionId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"categoryId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"name\" : \"name\", \"sectionId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"categoryId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /content/sections/{sectionId}/categories : Add a new content category to a section (Admin only)
     *
     * @param sectionId ID of the section to add the category to. (required)
     * @param contentSectionsSectionIdCategoriesPostRequest  (required)
     * @return Category created successfully. (status code 201)
     *         or Bad request - Missing name or duplicate. (status code 400)
     *         or Unauthorized. (status code 401)
     *         or Forbidden - User not an Admin. (status code 403)
     *         or Not Found - Section not found. (status code 404)
     */
    @Operation(
        operationId = "contentSectionsSectionIdCategoriesPost",
        summary = "Add a new content category to a section (Admin only)",
        tags = { "Admin - Content Management" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Category created successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentCategory.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request - Missing name or duplicate.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden - User not an Admin.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found - Section not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/content/sections/{sectionId}/categories",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ContentCategory> contentSectionsSectionIdCategoriesPost(
        @Parameter(name = "sectionId", description = "ID of the section to add the category to.", required = true, in = ParameterIn.PATH) @PathVariable("sectionId") String sectionId,
        @Parameter(name = "ContentSectionsSectionIdCategoriesPostRequest", description = "", required = true) @Valid @RequestBody ContentSectionsSectionIdCategoriesPostRequest contentSectionsSectionIdCategoriesPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"sectionId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"categoryId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /content/sections/{sectionId} : Update an existing content section (Admin only)
     *
     * @param sectionId ID of the section to update. (required)
     * @param contentSectionsSectionIdPutRequest  (required)
     * @return Section updated successfully. (status code 200)
     *         or Bad request - Missing name or invalid ID. (status code 400)
     *         or Unauthorized. (status code 401)
     *         or Forbidden - User not an Admin. (status code 403)
     *         or Not Found - Section not found. (status code 404)
     */
    @Operation(
        operationId = "contentSectionsSectionIdPut",
        summary = "Update an existing content section (Admin only)",
        tags = { "Admin - Content Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Section updated successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentSection.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request - Missing name or invalid ID.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden - User not an Admin.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found - Section not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/content/sections/{sectionId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ContentSection> contentSectionsSectionIdPut(
        @Parameter(name = "sectionId", description = "ID of the section to update.", required = true, in = ParameterIn.PATH) @PathVariable("sectionId") String sectionId,
        @Parameter(name = "ContentSectionsSectionIdPutRequest", description = "", required = true) @Valid @RequestBody ContentSectionsSectionIdPutRequest contentSectionsSectionIdPutRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"sectionId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
