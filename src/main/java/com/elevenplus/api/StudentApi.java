/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.elevenplus.api;

import com.elevenplus.model.*;
import com.elevenplus.model.Error;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-06-27T14:08:22.962266600+01:00[Europe/London]")
@Validated
@Tag(name = "Student - Progress & Attempts", description = "Endpoints for students to record and view their study progress.")
public interface StudentApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /student/attempts : Submit a student&#39;s answer for a multiple-choice question (Student only)
     *
     * @param studentAttemptRequest  (required)
     * @return Attempt recorded successfully. (status code 201)
     *         or Bad request - Invalid attempt data. (status code 400)
     *         or Unauthorized. (status code 401)
     *         or Forbidden - User not a Student. (status code 403)
     *         or Not Found - Question or student not found. (status code 404)
     */
    @Operation(
        operationId = "studentAttemptsPost",
        summary = "Submit a student's answer for a multiple-choice question (Student only)",
        tags = { "Student - Progress &amp; Attempts" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Attempt recorded successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StudentAttempt.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request - Invalid attempt data.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden - User not a Student.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found - Question or student not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/student/attempts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<StudentAttempt> studentAttemptsPost(
        @Parameter(name = "StudentAttemptRequest", description = "", required = true) @Valid @RequestBody StudentAttemptRequest studentAttemptRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"studentId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"selectedAnswerId\" : \"selectedAnswerId\", \"questionId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"timeTakenSeconds\" : 0, \"attemptId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"isCorrect\" : true, \"attemptedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /student/mocktests/start : Start a timed mock test (Student only)
     *
     * @param studentMocktestsStartPostRequest  (optional)
     * @return Mock test started, returns test details and questions. (status code 200)
     *         or Unauthorized. (status code 401)
     *         or Forbidden - User not a Student. (status code 403)
     *         or Not Found - No questions available for the given criteria. (status code 404)
     */
    @Operation(
        operationId = "studentMocktestsStartPost",
        summary = "Start a timed mock test (Student only)",
        tags = { "Student - Progress &amp; Attempts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Mock test started, returns test details and questions.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MockTestStartResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden - User not a Student.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found - No questions available for the given criteria.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/student/mocktests/start",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<MockTestStartResponse> studentMocktestsStartPost(
        @Parameter(name = "StudentMocktestsStartPostRequest", description = "") @Valid @RequestBody(required = false) StudentMocktestsStartPostRequest studentMocktestsStartPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"durationSeconds\" : 0, \"questions\" : [ { \"questionId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"options\" : [ { \"id\" : \"id\", \"text\" : \"text\" }, { \"id\" : \"id\", \"text\" : \"text\" } ], \"questionText\" : \"questionText\", \"tags\" : { \"difficulty\" : \"Easy\", \"section\" : \"section\", \"category\" : \"category\" } }, { \"questionId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"options\" : [ { \"id\" : \"id\", \"text\" : \"text\" }, { \"id\" : \"id\", \"text\" : \"text\" } ], \"questionText\" : \"questionText\", \"tags\" : { \"difficulty\" : \"Easy\", \"section\" : \"section\", \"category\" : \"category\" } } ], \"testId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"startTime\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /student/mocktests/{testId}/submit : Submit answers for a completed mock test (Student only)
     *
     * @param testId ID of the mock test to submit. (required)
     * @param studentMocktestsTestIdSubmitPostRequest  (required)
     * @return Mock test results submitted successfully. (status code 200)
     *         or Bad request - Invalid test ID or answers. (status code 400)
     *         or Unauthorized. (status code 401)
     *         or Forbidden - User not a Student. (status code 403)
     *         or Not Found - Test not found. (status code 404)
     *         or Conflict - Test already submitted. (status code 409)
     */
    @Operation(
        operationId = "studentMocktestsTestIdSubmitPost",
        summary = "Submit answers for a completed mock test (Student only)",
        tags = { "Student - Progress &amp; Attempts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Mock test results submitted successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MockTestSubmitResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request - Invalid test ID or answers.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden - User not a Student.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found - Test not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict - Test already submitted.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/student/mocktests/{testId}/submit",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<MockTestSubmitResponse> studentMocktestsTestIdSubmitPost(
        @Parameter(name = "testId", description = "ID of the mock test to submit.", required = true, in = ParameterIn.PATH) @PathVariable("testId") String testId,
        @Parameter(name = "StudentMocktestsTestIdSubmitPostRequest", description = "", required = true) @Valid @RequestBody StudentMocktestsTestIdSubmitPostRequest studentMocktestsTestIdSubmitPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"score\" : 0, \"totalQuestions\" : 6, \"percentage\" : 1.4658129, \"testId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"submittedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"results\" : [ { \"questionId\" : \"questionId\", \"correctAnswerId\" : \"correctAnswerId\", \"explanation\" : \"explanation\", \"isCorrect\" : true }, { \"questionId\" : \"questionId\", \"correctAnswerId\" : \"correctAnswerId\", \"explanation\" : \"explanation\", \"isCorrect\" : true } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /student/progress : Get overall student progress metrics (Student only)
     *
     * @return Student progress summary. (status code 200)
     *         or Unauthorized. (status code 401)
     *         or Forbidden - User not a Student. (status code 403)
     */
    @Operation(
        operationId = "studentProgressGet",
        summary = "Get overall student progress metrics (Student only)",
        tags = { "Student - Progress &amp; Attempts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Student progress summary.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StudentProgressSummary.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden - User not a Student.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/student/progress",
        produces = { "application/json" }
    )
    default ResponseEntity<StudentProgressSummary> studentProgressGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"incorrectAnswers\" : 1, \"totalQuestionsAttempted\" : 0, \"sectionsCompleted\" : 5, \"averageTimePerQuestion\" : 2.302136, \"correctAnswers\" : 6, \"accuracyPercentage\" : 5.962134 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /student/progress/questions/history : Get a detailed history of all questions attempted by the student (Student only)
     *
     * @param status Filter by attempt status. (optional)
     * @param sectionId Filter by section ID. (optional)
     * @param categoryId Filter by category ID. (optional)
     * @param difficulty Filter by difficulty level. (optional)
     * @return List of question attempts or unattempted questions. (status code 200)
     *         or Unauthorized. (status code 401)
     *         or Forbidden - User not a Student. (status code 403)
     */
    @Operation(
        operationId = "studentProgressQuestionsHistoryGet",
        summary = "Get a detailed history of all questions attempted by the student (Student only)",
        tags = { "Student - Progress &amp; Attempts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of question attempts or unattempted questions.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = QuestionHistoryItem.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden - User not a Student.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/student/progress/questions/history",
        produces = { "application/json" }
    )
    default ResponseEntity<List<QuestionHistoryItem>> studentProgressQuestionsHistoryGet(
        @Parameter(name = "status", description = "Filter by attempt status.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "status", required = false) String status,
        @Parameter(name = "sectionId", description = "Filter by section ID.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sectionId", required = false) String sectionId,
        @Parameter(name = "categoryId", description = "Filter by category ID.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "categoryId", required = false) String categoryId,
        @Parameter(name = "difficulty", description = "Filter by difficulty level.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "difficulty", required = false) String difficulty
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"selectedAnswerId\" : \"selectedAnswerId\", \"questionId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"explanation\" : \"explanation\", \"questionText\" : \"questionText\", \"status\" : \"Wrong\", \"attemptedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"isCorrect\" : true, \"tags\" : { \"difficulty\" : \"Easy\", \"section\" : \"section\", \"category\" : \"category\" } }, { \"selectedAnswerId\" : \"selectedAnswerId\", \"questionId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"explanation\" : \"explanation\", \"questionText\" : \"questionText\", \"status\" : \"Wrong\", \"attemptedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"isCorrect\" : true, \"tags\" : { \"difficulty\" : \"Easy\", \"section\" : \"section\", \"category\" : \"category\" } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
