/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.elevenplus.api;

import com.elevenplus.model.Error;
import com.elevenplus.model.NewQuestion;
import com.elevenplus.model.Question;
import com.elevenplus.model.UpdateQuestion;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-06-27T14:08:22.962266600+01:00[Europe/London]")
@Validated
@Tag(name = "Admin - Content Management", description = "Endpoints for administrators to manage sections, categories, and questions.")
public interface QuestionsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /questions : Add a new multiple-choice question (Admin only)
     *
     * @param newQuestion  (required)
     * @return Question created successfully. (status code 201)
     *         or Bad request - Invalid question data. (status code 400)
     *         or Unauthorized. (status code 401)
     *         or Forbidden - User not an Admin. (status code 403)
     */
    @Operation(
        operationId = "questionsPost",
        summary = "Add a new multiple-choice question (Admin only)",
        tags = { "Admin - Content Management" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Question created successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Question.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request - Invalid question data.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden - User not an Admin.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/questions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Question> questionsPost(
        @Parameter(name = "NewQuestion", description = "", required = true) @Valid @RequestBody NewQuestion newQuestion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"questionId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"correctAnswerId\" : \"correctAnswerId\", \"options\" : [ { \"id\" : \"id\", \"text\" : \"text\" }, { \"id\" : \"id\", \"text\" : \"text\" } ], \"explanation\" : \"explanation\", \"questionText\" : \"questionText\", \"tags\" : { \"difficulty\" : \"Easy\", \"section\" : \"section\", \"category\" : \"category\" }, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /questions/{questionId} : Delete a multiple-choice question (Admin only)
     *
     * @param questionId ID of the question to delete. (required)
     * @return Question deleted successfully. (status code 204)
     *         or Unauthorized. (status code 401)
     *         or Forbidden - User not an Admin. (status code 403)
     *         or Not Found - Question not found. (status code 404)
     */
    @Operation(
        operationId = "questionsQuestionIdDelete",
        summary = "Delete a multiple-choice question (Admin only)",
        tags = { "Admin - Content Management" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Question deleted successfully."),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden - User not an Admin.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found - Question not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/questions/{questionId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> questionsQuestionIdDelete(
        @Parameter(name = "questionId", description = "ID of the question to delete.", required = true, in = ParameterIn.PATH) @PathVariable("questionId") String questionId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /questions/{questionId} : Get a specific question and its explanation
     *
     * @param questionId ID of the question to retrieve. (required)
     * @return Question details retrieved successfully. (status code 200)
     *         or Unauthorized. (status code 401)
     *         or Not Found - Question not found. (status code 404)
     */
    @Operation(
        operationId = "questionsQuestionIdGet",
        summary = "Get a specific question and its explanation",
        tags = { "Admin - Content Management", "Student - Content Access" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Question details retrieved successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Question.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found - Question not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/questions/{questionId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Question> questionsQuestionIdGet(
        @Parameter(name = "questionId", description = "ID of the question to retrieve.", required = true, in = ParameterIn.PATH) @PathVariable("questionId") String questionId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"questionId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"correctAnswerId\" : \"correctAnswerId\", \"options\" : [ { \"id\" : \"id\", \"text\" : \"text\" }, { \"id\" : \"id\", \"text\" : \"text\" } ], \"explanation\" : \"explanation\", \"questionText\" : \"questionText\", \"tags\" : { \"difficulty\" : \"Easy\", \"section\" : \"section\", \"category\" : \"category\" }, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /questions/{questionId} : Update an existing multiple-choice question (Admin only)
     *
     * @param questionId ID of the question to update. (required)
     * @param updateQuestion  (required)
     * @return Question updated successfully. (status code 200)
     *         or Bad request - Invalid question data. (status code 400)
     *         or Unauthorized. (status code 401)
     *         or Forbidden - User not an Admin. (status code 403)
     *         or Not Found - Question not found. (status code 404)
     */
    @Operation(
        operationId = "questionsQuestionIdPut",
        summary = "Update an existing multiple-choice question (Admin only)",
        tags = { "Admin - Content Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Question updated successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Question.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request - Invalid question data.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden - User not an Admin.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found - Question not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/questions/{questionId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Question> questionsQuestionIdPut(
        @Parameter(name = "questionId", description = "ID of the question to update.", required = true, in = ParameterIn.PATH) @PathVariable("questionId") String questionId,
        @Parameter(name = "UpdateQuestion", description = "", required = true) @Valid @RequestBody UpdateQuestion updateQuestion
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"questionId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"correctAnswerId\" : \"correctAnswerId\", \"options\" : [ { \"id\" : \"id\", \"text\" : \"text\" }, { \"id\" : \"id\", \"text\" : \"text\" } ], \"explanation\" : \"explanation\", \"questionText\" : \"questionText\", \"tags\" : { \"difficulty\" : \"Easy\", \"section\" : \"section\", \"category\" : \"category\" }, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /questions/random : Get random multiple-choice questions (Student only)
     *
     * @param count Number of questions to retrieve. (optional, default to 10)
     * @param sectionId Filter by section ID. (optional)
     * @param categoryId Filter by category ID. (optional)
     * @param difficulty Filter by difficulty level. (optional)
     * @return List of questions. (status code 200)
     *         or Unauthorized. (status code 401)
     *         or Forbidden - User not a Student. (status code 403)
     *         or Not Found - No questions matching criteria. (status code 404)
     */
    @Operation(
        operationId = "questionsRandomGet",
        summary = "Get random multiple-choice questions (Student only)",
        tags = { "Student - Content Access" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of questions.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Question.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden - User not a Student.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found - No questions matching criteria.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/questions/random",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Question>> questionsRandomGet(
        @Min(1) @Parameter(name = "count", description = "Number of questions to retrieve.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "count", required = false, defaultValue = "10") Integer count,
        @Parameter(name = "sectionId", description = "Filter by section ID.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sectionId", required = false) String sectionId,
        @Parameter(name = "categoryId", description = "Filter by category ID.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "categoryId", required = false) String categoryId,
        @Parameter(name = "difficulty", description = "Filter by difficulty level.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "difficulty", required = false) String difficulty
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"questionId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"correctAnswerId\" : \"correctAnswerId\", \"options\" : [ { \"id\" : \"id\", \"text\" : \"text\" }, { \"id\" : \"id\", \"text\" : \"text\" } ], \"explanation\" : \"explanation\", \"questionText\" : \"questionText\", \"tags\" : { \"difficulty\" : \"Easy\", \"section\" : \"section\", \"category\" : \"category\" }, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"questionId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"correctAnswerId\" : \"correctAnswerId\", \"options\" : [ { \"id\" : \"id\", \"text\" : \"text\" }, { \"id\" : \"id\", \"text\" : \"text\" } ], \"explanation\" : \"explanation\", \"questionText\" : \"questionText\", \"tags\" : { \"difficulty\" : \"Easy\", \"section\" : \"section\", \"category\" : \"category\" }, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
