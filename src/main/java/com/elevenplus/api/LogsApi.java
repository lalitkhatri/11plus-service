/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.elevenplus.api;

import com.elevenplus.model.ActivityLog;
import com.elevenplus.model.Error;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-06-27T14:08:22.962266600+01:00[Europe/London]")
@Validated
@Tag(name = "Admin - User Management", description = "Endpoints for administrators to manage users and roles.")
public interface LogsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /logs/activity : Retrieve system activity logs (Admin only)
     *
     * @param userId Filter by specific user ID. (optional)
     * @param startDate Filter logs from this date (YYYY-MM-DD). (optional)
     * @param endDate Filter logs up to this date (YYYY-MM-DD). (optional)
     * @param activityType Filter by type of activity (e.g., login, content_update, question_attempt). (optional)
     * @return List of activity logs. (status code 200)
     *         or Unauthorized. (status code 401)
     *         or Forbidden - User not an Admin. (status code 403)
     */
    @Operation(
        operationId = "logsActivityGet",
        summary = "Retrieve system activity logs (Admin only)",
        tags = { "Admin - User Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of activity logs.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ActivityLog.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden - User not an Admin.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/logs/activity",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ActivityLog>> logsActivityGet(
        @Parameter(name = "userId", description = "Filter by specific user ID.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = false) String userId,
        @Parameter(name = "startDate", description = "Filter logs from this date (YYYY-MM-DD).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
        @Parameter(name = "endDate", description = "Filter logs up to this date (YYYY-MM-DD).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "endDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate,
        @Parameter(name = "activityType", description = "Filter by type of activity (e.g., login, content_update, question_attempt).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activityType", required = false) String activityType
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"description\" : \"description\", \"logId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"details\" : { \"key\" : \"\" }, \"activityType\" : \"activityType\", \"userId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"description\" : \"description\", \"logId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"details\" : { \"key\" : \"\" }, \"activityType\" : \"activityType\", \"userId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
